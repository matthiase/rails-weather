<% content_for :head do %> 
  <script type="text/javascript">
    function initAutocomplete() {
      const autocompleteInput = document.getElementById('location-input');
      const autocomplete = new google.maps.places.Autocomplete(autocompleteInput, {
        fields: ["address_components", "geometry", "name"],
        types: [],
      });
      autocomplete.addListener('place_changed', function () {
        const place = autocomplete.getPlace();
        if (!place.geometry) {
          // The user entered the name of a place that was not suggested and pressed the
          // enter key, or the request failed.
          return;
        }
        const fields = {
          'country': 'short_name',
          'postal_code': 'short_name',
          'administrative_area_level_1': 'short_name',
        }

        const components = Object.entries(fields).reduce((memo, [key, value]) => {
          const component = place.address_components.find((component) => component.types.includes(key));
          if (component) {
            memo[key] = component[value];
          }
          return memo;
        }, {});

        const { country, postal_code: postalCode, administrative_area_level_1: state } = components;
        const { location } = place.geometry;
        const lat = location.lat();
        const lng = location.lng();

        // Depending on the type of location, postal code may not be available.
        const keys = postalCode ? [country, postalCode] : [place.name, state, country];

        // Remove any falsy values from the array and use the remaining values to create a unique id.
        const id = keys.filter((key) => key).join('-').toLowerCase();
        console.log({ id, lat, lng });
      });
   }
  </script>
<% end %>

<div class="flex-1 flex-col items-center justify-center">
  <div class="flex justify-center mt-8 sm:mt-12">
     <input id="location-input" type="text" placeholder="Search for an address, city or zip code" class="block w-full sm:w-3/4 rounded-md border-0 py-1.5 px-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-1 focus:ring-inset focus:ring-indigo-400 sm:text-sm sm:leading-6">
  </div>
  <div class="md:mt-6 sm:mt-3 divide-x-0 divide-gray-200 overflow-hidden sm:grid sm:grid-cols-2 md:divide-x">
    <div class="p-6">
      <%= render 'current', location: @location, conditions: @weather.current %>
    </div>
    <div class="p-6">
      <%= render 'forecast', forecast: @weather.forecast %>
    </div>
  </div
</div>

<% content_for :body do %>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyClVzjdwwJb78Z-H-zE7TGjMqlU2DVDvtU&libraries=places&callback=initAutocomplete" async defer></script>
<% end %>