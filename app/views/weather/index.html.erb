<% content_for :head do %> 
  <script type="text/javascript">
    function initAutocomplete() {
      const autocompleteInput = document.getElementById('location-input');
      const autocomplete = new google.maps.places.Autocomplete(autocompleteInput, {
        fields: ["address_components", "geometry", "name"],
        types: [],
      });
      autocomplete.addListener('place_changed', function () {
        const place = autocomplete.getPlace();
        if (!place.geometry) {
          // The user entered the name of a place that was not suggested and pressed the
          // enter key, or the request failed.
          return;
        }
        const fields = {
          'country': 'short_name',
          'locality': 'long_name',
          'postal_code': 'short_name',
          'administrative_area_level_1': 'short_name',
        }

        const components = Object.entries(fields).reduce((memo, [key, value]) => {
          const component = place.address_components.find((component) => component.types.includes(key));
          if (component) {
            memo[key] = component[value];
          }
          return memo;
        }, {});

        const { country, postal_code: postalCode, administrative_area_level_1: state, locality: city } = components;
        const { location } = place.geometry;

        // Depending on the type of location, postal code may not be available. Remove any
        // falsy values from the array and use the remaining values to create a unique id.

        const keys = postalCode ? [country, postalCode] : [place.name, state, country];
        const id = keys.filter((key) => key).join('-').toLowerCase();
        const name = encodeURIComponent(city ? [city, state].join(', ') : place.name);
        const lat = encodeURIComponent(location.lat());
        const lng = encodeURIComponent(location.lng());

        // Replace the content of the turbo-frame with the new weather data.

        const frame = document.querySelector('turbo-frame#current-weather')
        const query = `name=${name}&lat=${lat}&lng=${lng}`
        frame.src = `/weather/${id}?${query}`
        frame.reload()
      });
   }
  </script>
<% end %>

<div class="flex-1 flex-col items-center justify-center">
  <div class="flex justify-center mt-8 sm:mt-12">
     <input id="location-input" type="text" placeholder="Search for an address, city or zip code" class="block w-full sm:w-3/4 rounded-md border-0 py-1.5 px-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-1 focus:ring-inset focus:ring-indigo-400 sm:text-sm sm:leading-6">
  </div>
    <turbo-frame id="current-weather" src="/weather"></turbo-frame>
</div>

<% content_for :body do %>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyClVzjdwwJb78Z-H-zE7TGjMqlU2DVDvtU&libraries=places&callback=initAutocomplete" async defer></script>
<% end %>